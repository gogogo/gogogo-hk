from google.appengine.api import memcache
from ragendja.dbutils import get_object_or_404
from google.appengine.ext import db
import logging

from utils import createEntity

def getCacheObjectKey(key=None,key_name=None):
	if key:
		key_object = db.Key(key)
	elif key_name:
		key_object = db.Key.from_path(model.kind(),key_name)
	else:
		raise ValueError("Not enough argument")
		
	return "gogogo__key__%s" % str(key_object) 


def getCacheEntityKey(key=None,key_name=None):
	if key:
		key_object = db.Key(key)
	elif key_name:
		key_object = db.Key.from_path(model.kind(),key_name)
	else:
		raise ValueError("Not enough argument")
		
	return "gogogo__entity__%s" % str(key_object) 
		

def getCachedObjectOr404(model,key=None,key_name=None):
	"""
	Get a object from cache. If it is not existed in the cache, 
	it will query from database directly and save it in cache.
	
	If the object is not existed in the cache and database , it 
	will raise Http404 exception
	"""

	cache_key = getCacheObjectKey(key=key , key_name = None)

	#print cache_key
	object = memcache.get(cache_key)
	
	if object == None:
		object = get_object_or_404(model, key=key,key_name=key_name)
		if not memcache.add(cache_key, object, 3600):
			logging.error("Memcache set %s failed." % cache_key)

	return object

def getCachedEntityOr404(model,key=None,key_name=None):
	"""
	Get cached entity object generated by createEntity()
	"""
	
	cache_key = getCacheEntityKey(key=key , key_name = None)
	
	entity = memcache.get(cache_key)

	if entity == None:
		object = getCachedObjectOr404(model, key=key,key_name=key_name)
		entity = createEntity(object)		
		
		if not memcache.add(cache_key, entity, 3600):
			logging.error("Memcache set %s failed." % cache_key)
	
	return entity
