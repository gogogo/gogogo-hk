from google.appengine.api import memcache
from ragendja.dbutils import get_object_or_404
from google.appengine.ext import db
import logging

from utils import createEntity

_default_cache_time = 3600

def _get_key_string(model,key=None,key_name=None , key_string = None , id = None):
	if key:
		key_string = str(key)
	elif key_string:
		pass
	elif key_name:
		key_string = str(db.Key.from_path(model.kind(),key_name))
	elif id is not None:
		key_string = str(db.Key.from_path(model.kind(),id))
	else:
		raise ValueError("Not enough argument")

	return key_string	

def getCacheObjectKey(model = None , key=None,key_name=None , key_string = None , id = None):
	return "gogogo__key__%s" % str(_get_key_string(model=model , key=key,key_name=key_name,key_string= key_string , id = id) ) 

def getCacheEntityKey(model = None , key=None,key_name=None , key_string = None, id = None ):
	return "gogogo__entity__%s" % str(_get_key_string(model=model , key=key,key_name=key_name,key_string= key_string , id =id) ) 

def getCachedObjectOr404(model = None,key=None,key_name=None,id = None , id_or_name = None):
	"""
	Get a object from cache. If it is not existed in the cache, 
	it will query from database directly and save it in cache.
	
	If the object is not existed in the cache and database , it 
	will raise Http404 exception
	"""
	
	if id_or_name:
		try:
			id = int(id_or_name)
		except ValueError:
			key_name = id_or_name

	cache_key = getCacheObjectKey(model = model , key=key , key_name = key_name,id = id)

	#print cache_key
	object = memcache.get(cache_key)
	
	if object == None:
		if key:
			object = get_object_or_404(model,key)
		else:
			object = get_object_or_404(model,key_name=key_name, id = id)
		if not memcache.add(cache_key, object, _default_cache_time):
			logging.error("Memcache set %s failed." % cache_key)

	return object

def getCachedEntityOr404(model = None,key=None,key_name=None , id = None , id_or_name = None):
	"""
	Get cached entity object generated by createEntity()
	"""
	
	if id_or_name:
		try:
			id = int(id_or_name)
		except ValueError:
			key_name = id_or_name	
	
	cache_key = getCacheEntityKey(model = model ,key=key , key_name = key_name, id = id)
	
	entity = memcache.get(cache_key)

	if entity == None:
		object = getCachedObjectOr404(model, key=key,key_name=key_name, id = id)
		entity = createEntity(object)		
		
		if not memcache.add(cache_key, entity, _default_cache_time):
			logging.error("Memcache set %s failed." % cache_key)
	
	return entity

def updateCachedObject(object):
	"""
	Update the cache of a object and remove the cache of that
	associated entity object
	"""
	
	cache_key = getCacheObjectKey(key = object.key() )
	
	memcache.set(cache_key,object,_default_cache_time)
	
	cache_key = getCacheEntityKey(key = object.key())
	
	memcache.delete(cache_key)
	
def removeCache(object):
    """
    Remove the cache of the object
    """

    cache_key = getCacheObjectKey(key = object.key() )

    memcache.delete(cache_key)

    cache_key = getCacheEntityKey(key = object.key())

    memcache.delete(cache_key)    
    
